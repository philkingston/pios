#!/bin/sh

# udhcpc script edited by Tim Riker <Tim@Rikers.org>

[ -z "$1" ] && echo "Error: should be called from udhcpc" && exit 1

nfsbootdevice()
{
	nfsboot=0;

	for item in $(cat /proc/cmdline)
	do
		key=$(echo $item | cut -d= -f1)
		value=$(echo $item | cut -d= -f2)
		if [ "x${key}" = "xroot" ] && [ "x${value}" = "x/dev/nfs" ] ; then
			nfsboot=$(( ${nfsboot} + 1 ))
		fi
		if [ "x${key}" = "xnfsroot" ] ; then
			nfsboot=$(( ${nfsboot} + 1 ))
		fi
		if [ "x${key}" = "xip" ] ; then
			bootdevice=$(echo $value | cut -d: -f6)
		fi
	done

	if [ ${nfsboot} == 2 ] ; then
		echo $bootdevice
	fi
}

NFS_INTERFACE=$(nfsbootdevice)
RESOLV_CONF="/etc/resolv.conf"
[ -e $RESOLV_CONF ] || touch $RESOLV_CONF
[ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"
[ -n "$subnet" ] && NETMASK="netmask $subnet"

case "$1" in
	deconfig)
		/sbin/ifconfig $interface up
		if [ ! "x$NFS_INTERFACE" = "x$interface" ] ; then
			/sbin/ifconfig $interface 0.0.0.0
		fi

		# drop info from this interface
		# resolv.conf may be a symlink to /tmp/, so take care
		TMPFILE=$(mktemp)
		grep -vE "# $interface\$" $RESOLV_CONF > $TMPFILE
		cat $TMPFILE > $RESOLV_CONF
		rm -f $TMPFILE

		if [ -x /usr/sbin/avahi-autoipd ]; then
			/usr/sbin/avahi-autoipd -k $interface
		fi
		;;

	leasefail|nak)
		if [ -x /usr/sbin/avahi-autoipd ]; then
			/usr/sbin/avahi-autoipd -wD $interface --no-chroot
		fi
		;;

	renew|bound)
		if [ -x /usr/sbin/avahi-autoipd ]; then
			/usr/sbin/avahi-autoipd -k $interface
		fi
		/sbin/ifconfig $interface $ip $BROADCAST $NETMASK

		if [ -n "$router" ] ; then
			# Count the number of default routes set, not by this $interface
			defroutes=$(ip route | grep default | grep -v $interface | wc -l)

			if [ $defroutes = 0 ] ; then

				echo "deleting routers"
				while route del default gw 0.0.0.0 dev $interface 2> /dev/null; do
					:
				done

				for i in $router ; do
					route add default gw $i dev $interface
				done
			fi
		fi

		# drop info from this interface
		# resolv.conf may be a symlink to /tmp/, so take care
		TMPFILE=$(mktemp)
		grep -vE "# $interface\$" $RESOLV_CONF > $TMPFILE
		cat $TMPFILE > $RESOLV_CONF
		rm -f $TMPFILE

		[ -n "$domain" ] && echo "search $domain # $interface" >> $RESOLV_CONF
		for i in $dns ; do
			echo adding dns $i
			echo "nameserver $i # $interface" >> $RESOLV_CONF
		done
		;;
esac

exit 0
