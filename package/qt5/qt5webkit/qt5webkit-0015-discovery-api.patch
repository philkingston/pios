From a718f34e09bb0b738f7d3bac1e7a0702e2bbe551 Mon Sep 17 00:00:00 2001
From: Brendan Long <b.long@cablelabs.com>
Date: Wed, 21 Aug 2013 17:38:48 -0600
Subject: [PATCH] Add basic discovery API.

---
 .../Configurations/FeatureDefines.xcconfig         |   1 +
 Source/WTF/wtf/FeatureDefines.h                    |   4 +
 .../WebCore/Configurations/FeatureDefines.xcconfig |   1 +
 Source/WebCore/DerivedSources.pri                  |  11 ++
 .../Modules/discovery/NavigatorNetworkService.cpp  | 139 +++++++++++++++++++++
 .../Modules/discovery/NavigatorNetworkService.h    |  71 +++++++++++
 .../Modules/discovery/NavigatorNetworkService.idl  |  34 +++++
 .../discovery/NavigatorNetworkServiceError.cpp     |  36 ++++++
 .../discovery/NavigatorNetworkServiceError.h       |  58 +++++++++
 .../discovery/NavigatorNetworkServiceError.idl     |  33 +++++
 .../NavigatorNetworkServiceErrorCallback.h         |  43 +++++++
 .../NavigatorNetworkServiceErrorCallback.idl       |  31 +++++
 .../NavigatorNetworkServiceSuccessCallback.h       |  45 +++++++
 .../NavigatorNetworkServiceSuccessCallback.idl     |  31 +++++
 .../WebCore/Modules/discovery/NetworkService.cpp   |  59 +++++++++
 Source/WebCore/Modules/discovery/NetworkService.h  |  88 +++++++++++++
 .../WebCore/Modules/discovery/NetworkService.idl   |  43 +++++++
 .../WebCore/Modules/discovery/NetworkServices.cpp  |  71 +++++++++++
 Source/WebCore/Modules/discovery/NetworkServices.h |  75 +++++++++++
 .../WebCore/Modules/discovery/NetworkServices.idl  |  40 ++++++
 Source/WebCore/Target.pri                          |  15 +++
 Source/WebCore/WebCore.pri                         |   1 +
 Source/WebCore/dom/EventNames.h                    |   6 +
 Source/WebCore/dom/EventTarget.h                   |   2 +
 Source/WebCore/dom/EventTargetFactory.in           |   2 +
 .../mac/Configurations/FeatureDefines.xcconfig     |   1 +
 .../WebKit2/Configurations/FeatureDefines.xcconfig |   1 +
 Source/autotools/SetupWebKitFeatures.m4            |   6 +
 Source/cmake/WebKitFeatures.cmake                  |   1 +
 Source/cmakeconfig.h.cmake                         |   1 +
 Tools/Scripts/webkitperl/FeatureList.pm            |   4 +
 Tools/qmake/mkspecs/features/features.pri          |   1 +
 32 files changed, 955 insertions(+)
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkService.cpp
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkService.h
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkService.idl
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.cpp
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.h
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.idl
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkServiceErrorCallback.h
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkServiceErrorCallback.idl
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkServiceSuccessCallback.h
 create mode 100644 Source/WebCore/Modules/discovery/NavigatorNetworkServiceSuccessCallback.idl
 create mode 100644 Source/WebCore/Modules/discovery/NetworkService.cpp
 create mode 100644 Source/WebCore/Modules/discovery/NetworkService.h
 create mode 100644 Source/WebCore/Modules/discovery/NetworkService.idl
 create mode 100644 Source/WebCore/Modules/discovery/NetworkServices.cpp
 create mode 100644 Source/WebCore/Modules/discovery/NetworkServices.h
 create mode 100644 Source/WebCore/Modules/discovery/NetworkServices.idl

diff --git a/Source/JavaScriptCore/Configurations/FeatureDefines.xcconfig b/Source/JavaScriptCore/Configurations/FeatureDefines.xcconfig
index b1e787b..172d9bb 100644
--- a/Source/JavaScriptCore/Configurations/FeatureDefines.xcconfig
+++ b/Source/JavaScriptCore/Configurations/FeatureDefines.xcconfig
@@ -71,6 +71,7 @@ ENABLE_DEVICE_ORIENTATION_iphoneos = ENABLE_DEVICE_ORIENTATION;
 ENABLE_DEVICE_ORIENTATION_iphonesimulator = $(ENABLE_DEVICE_ORIENTATION_iphoneos);
 ENABLE_DIALOG_ELEMENT = ;
 ENABLE_DIRECTORY_UPLOAD = ;
+ENABLE_DISCOVERY = ENABLE_DISCOVERY;
 ENABLE_DOM4_EVENTS_CONSTRUCTOR = ENABLE_DOM4_EVENTS_CONSTRUCTOR;
 ENABLE_DRAGGABLE_REGION = ;
 ENABLE_ENCRYPTED_MEDIA = $(ENABLE_ENCRYPTED_MEDIA_$(PLATFORM_NAME));
diff --git a/Source/WTF/wtf/FeatureDefines.h b/Source/WTF/wtf/FeatureDefines.h
index 292a3d9..b7312bc 100644
--- a/Source/WTF/wtf/FeatureDefines.h
+++ b/Source/WTF/wtf/FeatureDefines.h
@@ -68,6 +68,10 @@
 #define ENABLE_CSS_IMAGE_SET 1
 #endif
 
+#if !defined(ENABLE_DISCOVERY)
+#define ENABLE_DISCOVERY 0
+#endif
+
 #if !defined(ENABLE_DRAG_SUPPORT)
 #define ENABLE_DRAG_SUPPORT 0
 #endif
diff --git a/Source/WebCore/Configurations/FeatureDefines.xcconfig b/Source/WebCore/Configurations/FeatureDefines.xcconfig
index b079f18..555a936 100644
--- a/Source/WebCore/Configurations/FeatureDefines.xcconfig
+++ b/Source/WebCore/Configurations/FeatureDefines.xcconfig
@@ -71,6 +71,7 @@ ENABLE_DEVICE_ORIENTATION_iphoneos = ENABLE_DEVICE_ORIENTATION;
 ENABLE_DEVICE_ORIENTATION_iphonesimulator = $(ENABLE_DEVICE_ORIENTATION_iphoneos);
 ENABLE_DIALOG_ELEMENT = ;
 ENABLE_DIRECTORY_UPLOAD = ;
+ENABLE_DISCOVERY = ENABLE_DISCOVERY;
 ENABLE_DOM4_EVENTS_CONSTRUCTOR = ENABLE_DOM4_EVENTS_CONSTRUCTOR;
 ENABLE_DRAGGABLE_REGION = ;
 ENABLE_ENCRYPTED_MEDIA = $(ENABLE_ENCRYPTED_MEDIA_$(PLATFORM_NAME));
diff --git a/Source/WebCore/DerivedSources.pri b/Source/WebCore/DerivedSources.pri
index ffc601f..4ecb9d2 100644
--- a/Source/WebCore/DerivedSources.pri
+++ b/Source/WebCore/DerivedSources.pri
@@ -650,6 +650,16 @@ enable?(SVG) {
     $$PWD/svg/SVGZoomEvent.idl
 }
 
+enable?(DISCOVERY) {
+  IDL_BINDINGS += \
+    $$PWD/Modules/discovery/NavigatorNetworkService.idl \
+    $$PWD/Modules/discovery/NavigatorNetworkServiceError.idl \
+    $$PWD/Modules/discovery/NavigatorNetworkServiceErrorCallback.idl \
+    $$PWD/Modules/discovery/NavigatorNetworkServiceSuccessCallback.idl \
+    $$PWD/Modules/discovery/NetworkService.idl \
+    $$PWD/Modules/discovery/NetworkServices.idl
+}
+
 enable?(GAMEPAD) {
   IDL_BINDINGS += \
     $$PWD/Modules/gamepad/Gamepad.idl \
@@ -775,6 +785,7 @@ generateBindings.script = $$PWD/bindings/scripts/generate-bindings.pl
 generateBindings.commands = $$setEnvironmentVariable(SOURCE_ROOT, $$toSystemPath($$PWD)) && perl -I$$PWD/bindings/scripts $$generateBindings.script \
                             --defines \"$$javascriptFeatureDefines()\" \
                             --generator JS \
+                            --include Modules/discovery \
                             --include Modules/filesystem \
                             --include Modules/geolocation \
                             --include Modules/indexeddb \
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkService.cpp b/Source/WebCore/Modules/discovery/NavigatorNetworkService.cpp
new file mode 100644
index 0000000..00093e1
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkService.cpp
@@ -0,0 +1,139 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "NavigatorNetworkService.h"
+
+#include "Navigator.h"
+
+namespace WebCore {
+
+static bool isValidServiceType(String type)
+{
+    // a string that begins with upnp: or zeroconf: followed by one or more
+    // characters in the ranges U+0021, U+0023 to U+0027, U+002A to U+002B,
+    // U+002D to U+002E, U+0030 to U+0039, U+0041 to U+005A, U+005E to U+007E.
+    if (type.startsWith("upnp:") || type.startsWith("zeroconf:")) {
+        // TODO: Check string
+        return true;
+    // a string that begins with dial: followed by an integer version.
+    }
+    if (type.startsWith("dial:")) {
+        bool ok;
+        type.substring(5).toInt(&ok);
+        return ok;
+    }
+    return false;
+}
+
+NavigatorNetworkService::NavigatorNetworkService(Frame* frame)
+    : DOMWindowProperty(frame)
+{
+}
+
+NavigatorNetworkService::~NavigatorNetworkService()
+{
+}
+
+const char* NavigatorNetworkService::supplementName()
+{
+    return "NavigatorNetworkService";
+}
+
+NavigatorNetworkService* NavigatorNetworkService::from(Navigator* navigator)
+{
+    NavigatorNetworkService* supplement = static_cast<NavigatorNetworkService*>(
+        Supplement<Navigator>::from(navigator, supplementName()));
+    if (!supplement) {
+        supplement = new NavigatorNetworkService(navigator->frame());
+        provideTo(navigator, supplementName(), adoptPtr(supplement));
+    }
+    return supplement;
+}
+
+void NavigatorNetworkService::getNetworkServices(Navigator* navigator,
+    const Vector<String>& types,
+    PassRefPtr<NavigatorNetworkServiceSuccessCallback> successCallback,
+    PassRefPtr<NavigatorNetworkServiceErrorCallback> errorCallback)
+{
+    return NavigatorNetworkService::from(navigator)->getNetworkServices(types,
+        successCallback, errorCallback);
+}
+
+void NavigatorNetworkService::getNetworkServices(const Vector<String>& types,
+    PassRefPtr<NavigatorNetworkServiceSuccessCallback> successCallback,
+    PassRefPtr<NavigatorNetworkServiceErrorCallback> errorCallback)
+{
+    // Let requested control types be initially set to an empty array.
+    Vector<String> requestedControlTypes;
+
+    // If type is an array consisting of one or more valid service type tokens,
+    // then let requested control types by the value of type, removing any
+    // non-valid service type tokens from the resulting array.
+    // If type is a string consisting of one valid service type token, then let
+    // requested control types be an array containing one item with a value of
+    // type.
+    for (size_t i = 0; i < types.size(); ++i) {
+        if (isValidServiceType(types[i]))
+            requestedControlTypes.append(types[i]);
+    }
+
+    // If requested control types is an array that contains at least one or
+    // more valid service type tokens then continue to the step labeled process
+    // below. Otherwise, the user agent MUST queue a task to invoke
+    // errorCallback, if it is provided and is an object of type Function, with
+    // a new NavigatorNetworkServiceError object whose code attribute has the
+    // numeric value 2 (UNKNOWN_TYPE_PREFIX_ERR) as its argument, abort any
+    // remaining steps and return.
+    if (requestedControlTypes.isEmpty()) {
+        if (errorCallback)
+            errorCallback->handleEvent(NavigatorNetworkServiceError::create(
+                NavigatorNetworkServiceError::UNKNOWN_TYPE_PREFIX_ERR).get());
+        return;
+    }
+
+    // Process: Let services found be an empty array.
+    Vector<RefPtr<NetworkService> > servicesFound;
+
+    // For each available service in the list of available service records run
+    // the following steps:
+    // For each requested control type in requested control types: If available
+    // service's type attribute equals the requested control type then let
+    // matched service equal the value of available service and continue at the
+    // step labeled attach below.
+    // WebKit Note: We're doing this backwards so we can lookup available
+    // services in a HashMap.
+    // Attach: If matched service is not empty then run the following steps:
+    // Let new service object be a new NetworkService object, mapping the
+    // parameters of matched service to this new object where possible.
+    // Append new service object to the services found array.
+    for (size_t i = 0; i < requestedControlTypes.size(); ++i)
+        servicesFound.appendVector(m_availableServiceRecords.get(requestedControlTypes[i]));
+
+
+    // Return, and run the remaining steps asynchronously.
+}
+
+} // namespace WebCore
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkService.h b/Source/WebCore/Modules/discovery/NavigatorNetworkService.h
new file mode 100644
index 0000000..0b8959c
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkService.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef NavigatorNetworkService_h
+#define NavigatorNetworkService_h
+#if ENABLE(DISCOVERY)
+
+#include "DOMWindowProperty.h"
+#include "NavigatorNetworkServiceErrorCallback.h"
+#include "NavigatorNetworkServiceSuccessCallback.h"
+#include "NetworkService.h"
+#include "ScriptValue.h"
+#include "Supplementable.h"
+#include <wtf/Forward.h>
+#include <wtf/PassRefPtr.h>
+#include <wtf/RefCounted.h>
+#include <wtf/RefPtr.h>
+#include <wtf/Vector.h>
+
+namespace WebCore {
+
+class Frame;
+class Navigator;
+
+class NavigatorNetworkService
+    : public Supplementable<NavigatorNetworkService>
+    , public Supplement<Navigator>
+    , public DOMWindowProperty {
+public:
+    virtual ~NavigatorNetworkService();
+    static NavigatorNetworkService* from(Navigator*);
+
+    static void getNetworkServices(Navigator*, const Vector<String>& types,
+        PassRefPtr<NavigatorNetworkServiceSuccessCallback>,
+        PassRefPtr<NavigatorNetworkServiceErrorCallback>);
+    void getNetworkServices(const Vector<String>& types,
+        PassRefPtr<NavigatorNetworkServiceSuccessCallback>,
+        PassRefPtr<NavigatorNetworkServiceErrorCallback>);
+
+private:
+    explicit NavigatorNetworkService(Frame*);
+    static const char* supplementName();
+
+    HashMap<String, Vector<RefPtr<NetworkService> > > m_availableServiceRecords;
+};
+
+}
+#endif
+#endif
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkService.idl b/Source/WebCore/Modules/discovery/NavigatorNetworkService.idl
new file mode 100644
index 0000000..751998c
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkService.idl
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=DISCOVERY,
+] partial interface Navigator {
+    // Obtain a Local-networked Service
+    void getNetworkServices(in DOMString[] type,
+        in NavigatorNetworkServiceSuccessCallback successCallback,
+        in optional NavigatorNetworkServiceErrorCallback errorCallback);
+};
+
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.cpp b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.cpp
new file mode 100644
index 0000000..18ab316
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.cpp
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "NavigatorNetworkServiceError.h"
+
+namespace WebCore {
+
+NavigatorNetworkServiceError::NavigatorNetworkServiceError(ErrorCode code)
+    : m_code(code)
+{
+}
+
+} // namespace WebCore
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.h b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.h
new file mode 100644
index 0000000..1f1fa35
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef NavigatorNetworkServiceError_h
+#define NavigatorNetworkServiceError_h
+#if ENABLE(DISCOVERY)
+
+#include <wtf/PassRefPtr.h>
+#include <wtf/RefCounted.h>
+
+namespace WebCore {
+
+class NavigatorNetworkServiceError : public RefCounted<NavigatorNetworkServiceError> {
+public:
+    enum ErrorCode {
+        PERMISSION_DENIED_ERR = 1,
+        UNKNOWN_TYPE_PREFIX_ERR = 2
+    };
+
+    static PassRefPtr<NavigatorNetworkServiceError> create(ErrorCode code)
+    {
+        return adoptRef(new NavigatorNetworkServiceError(code));
+    }
+    virtual ~NavigatorNetworkServiceError() { }
+
+    ErrorCode code() const { return m_code; }
+
+private:
+    NavigatorNetworkServiceError(ErrorCode);
+
+    ErrorCode m_code;
+};
+
+}
+#endif
+#endif
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.idl b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.idl
new file mode 100644
index 0000000..30e9a7c
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceError.idl
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=DISCOVERY,
+    NoInterfaceObject
+] interface NavigatorNetworkServiceError {
+    const unsigned short PERMISSION_DENIED_ERR = 1;
+    const unsigned short UNKNOWN_TYPE_PREFIX_ERR = 2;
+    readonly attribute unsigned short code;
+};
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkServiceErrorCallback.h b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceErrorCallback.h
new file mode 100644
index 0000000..bc31f93
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceErrorCallback.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef NavigatorNetworkServiceErrorCallback_h
+#define NavigatorNetworkServiceErrorCallback_h
+#if ENABLE(DISCOVERY)
+
+#include "NavigatorNetworkServiceError.h"
+#include <wtf/RefCounted.h>
+
+namespace WebCore {
+
+class NavigatorNetworkServiceErrorCallback : public RefCounted<NavigatorNetworkServiceErrorCallback> {
+public:
+    virtual ~NavigatorNetworkServiceErrorCallback() { }
+    virtual bool handleEvent(NavigatorNetworkServiceError*) = 0;
+};
+
+}
+#endif
+#endif
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkServiceErrorCallback.idl b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceErrorCallback.idl
new file mode 100644
index 0000000..c658c2b
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceErrorCallback.idl
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=DISCOVERY,
+    NoInterfaceObject
+] callback interface NavigatorNetworkServiceErrorCallback {
+    boolean handleEvent(in NavigatorNetworkServiceError error);
+};
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkServiceSuccessCallback.h b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceSuccessCallback.h
new file mode 100644
index 0000000..cb511f6
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceSuccessCallback.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef NavigatorNetworkServiceSuccessCallback_h
+#define NavigatorNetworkServiceSuccessCallback_h
+#if ENABLE(DISCOVERY)
+
+#include "NetworkServices.h"
+#include <wtf/RefCounted.h>
+
+namespace WebCore {
+
+class NavigatorNetworkService;
+
+class NavigatorNetworkServiceSuccessCallback : public RefCounted<NavigatorNetworkServiceSuccessCallback> {
+public:
+    virtual ~NavigatorNetworkServiceSuccessCallback() { }
+    virtual bool handleEvent(NetworkServices*) = 0;
+};
+
+}
+#endif
+#endif
diff --git a/Source/WebCore/Modules/discovery/NavigatorNetworkServiceSuccessCallback.idl b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceSuccessCallback.idl
new file mode 100644
index 0000000..0c933bb
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NavigatorNetworkServiceSuccessCallback.idl
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=DISCOVERY,
+    NoInterfaceObject
+] callback interface NavigatorNetworkServiceSuccessCallback {
+    boolean handleEvent(in NetworkServices services);
+};
diff --git a/Source/WebCore/Modules/discovery/NetworkService.cpp b/Source/WebCore/Modules/discovery/NetworkService.cpp
new file mode 100644
index 0000000..70a3b82
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NetworkService.cpp
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "NetworkService.h"
+
+namespace WebCore {
+
+NetworkService::NetworkService(ScriptExecutionContext* context,
+    const String& id, const String& name, const String& type,
+    const String& url, const String& config)
+    : m_context(context)
+    , m_id(id)
+    , m_name(name)
+    , m_type(type)
+    , m_url(url)
+    , m_config(config)
+    , m_online(false)
+{
+}
+
+NetworkService::~NetworkService()
+{
+}
+
+const AtomicString& NetworkService::interfaceName() const
+{
+    return eventNames().interfaceForNetworkService;
+}
+
+ScriptExecutionContext* NetworkService::scriptExecutionContext() const
+{
+    return m_context;
+}
+
+
+} // namespace WebCore
diff --git a/Source/WebCore/Modules/discovery/NetworkService.h b/Source/WebCore/Modules/discovery/NetworkService.h
new file mode 100644
index 0000000..0bab8b2
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NetworkService.h
@@ -0,0 +1,88 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef NetworkService_h
+#define NetworkService_h
+#if ENABLE(DISCOVERY)
+
+#include "EventListener.h"
+#include "EventTarget.h"
+#include <wtf/Forward.h>
+
+namespace WebCore {
+
+class NetworkService : public RefCounted<NetworkService>, public EventTarget {
+public:
+    static PassRefPtr<NetworkService> create(ScriptExecutionContext* context,
+        const String& id, const String& name, const String& type,
+        const String& url, const String& config)
+    {
+        return adoptRef(new NetworkService(context, id, name, type, url, config));
+    }
+    virtual ~NetworkService();
+
+    String id() const { return m_id; }
+    String name() const { return m_name; }
+    String type() const { return m_type; }
+    String url() const { return m_url; }
+    String config() const { return m_config; }
+    bool online() const { return m_online; }
+    void setOnline(bool online) { m_online = online; }
+
+    // EventTarget
+    virtual const AtomicString& interfaceName() const;
+    virtual ScriptExecutionContext* scriptExecutionContext() const;
+
+    using RefCounted<NetworkService>::ref;
+    using RefCounted<NetworkService>::deref;
+
+    DEFINE_ATTRIBUTE_EVENT_LISTENER(serviceonline);
+    DEFINE_ATTRIBUTE_EVENT_LISTENER(serviceoffline);
+    DEFINE_ATTRIBUTE_EVENT_LISTENER(notify);
+
+private:
+    NetworkService(ScriptExecutionContext*, const String& id, const String& name,
+        const String& type, const String& url, const String& config);
+
+    // EventTarget
+    virtual void refEventTarget() OVERRIDE { ref(); }
+    virtual void derefEventTarget() OVERRIDE { deref(); }
+    virtual EventTargetData* eventTargetData() OVERRIDE { return &m_eventTargetData; }
+    virtual EventTargetData* ensureEventTargetData() OVERRIDE { return &m_eventTargetData; }
+
+    ScriptExecutionContext* m_context;
+    EventTargetData m_eventTargetData;
+
+    String m_id;
+    String m_name;
+    String m_type;
+    String m_url;
+    String m_config;
+    bool m_online;
+};
+
+}
+#endif
+#endif
diff --git a/Source/WebCore/Modules/discovery/NetworkService.idl b/Source/WebCore/Modules/discovery/NetworkService.idl
new file mode 100644
index 0000000..ebf520d
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NetworkService.idl
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=DISCOVERY,
+    NoInterfaceObject
+] interface NetworkService {
+    readonly attribute DOMString id;
+    readonly attribute DOMString name;
+    readonly attribute DOMString type;
+    readonly attribute DOMString url;
+    readonly attribute DOMString config;
+
+    readonly attribute boolean online;
+
+    // event handler attributes
+    attribute EventListener onserviceonline;
+    attribute EventListener onserviceoffline;
+
+    attribute EventListener onnotify;
+};
diff --git a/Source/WebCore/Modules/discovery/NetworkServices.cpp b/Source/WebCore/Modules/discovery/NetworkServices.cpp
new file mode 100644
index 0000000..bffe237
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NetworkServices.cpp
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "NetworkServices.h"
+
+namespace WebCore {
+
+NetworkServices::NetworkServices(ScriptExecutionContext* context)
+    : m_context(context)
+{
+}
+
+NetworkServices::~NetworkServices()
+{
+}
+
+const AtomicString& NetworkServices::interfaceName() const
+{
+    return eventNames().interfaceForNetworkServices;
+}
+
+ScriptExecutionContext* NetworkServices::scriptExecutionContext() const
+{
+    return m_context;
+}
+
+NetworkService* NetworkServices::item(unsigned long index)
+{
+    if (index < m_services.size())
+        return 0;
+    return m_services[index].get();
+}
+
+NetworkService* NetworkServices::getServiceById(String id)
+{
+    for (size_t i = 0; i < m_services.size(); ++i) {
+        if (m_services[i]->id() == id)
+            return m_services[i].get();
+    }
+    return 0;
+}
+
+unsigned long NetworkServices::servicesAvailable() const
+{
+    return 0;
+}
+
+} // namespace WebCore
diff --git a/Source/WebCore/Modules/discovery/NetworkServices.h b/Source/WebCore/Modules/discovery/NetworkServices.h
new file mode 100644
index 0000000..5d06106
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NetworkServices.h
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef NetworkServices_h
+#define NetworkServices_h
+#if ENABLE(DISCOVERY)
+
+#include "EventListener.h"
+#include "EventTarget.h"
+#include "NetworkService.h"
+#include <wtf/Forward.h>
+#include <wtf/Vector.h>
+
+namespace WebCore {
+
+class NetworkServices : public RefCounted<NetworkService>, public EventTarget {
+public:
+    virtual ~NetworkServices();
+
+    unsigned long length() const { return m_services.size(); }
+    NetworkService* item(unsigned long index);
+    NetworkService* getServiceById(String id);
+
+    unsigned long servicesAvailable() const;
+
+    // EventTarget
+    virtual const AtomicString& interfaceName() const;
+    virtual ScriptExecutionContext* scriptExecutionContext() const;
+
+    using RefCounted<NetworkService>::ref;
+    using RefCounted<NetworkService>::deref;
+
+    DEFINE_ATTRIBUTE_EVENT_LISTENER(serviceavailable);
+    DEFINE_ATTRIBUTE_EVENT_LISTENER(serviceunavailable);
+
+private:
+    NetworkServices(ScriptExecutionContext*);
+
+    // EventTarget
+    virtual void refEventTarget() OVERRIDE { ref(); }
+    virtual void derefEventTarget() OVERRIDE { deref(); }
+    virtual EventTargetData* eventTargetData() OVERRIDE { return &m_eventTargetData; }
+    virtual EventTargetData* ensureEventTargetData() OVERRIDE { return &m_eventTargetData; }
+
+    ScriptExecutionContext* m_context;
+    EventTargetData m_eventTargetData;
+
+    Vector<RefPtr<NetworkService> > m_services;
+};
+
+}
+#endif
+#endif
diff --git a/Source/WebCore/Modules/discovery/NetworkServices.idl b/Source/WebCore/Modules/discovery/NetworkServices.idl
new file mode 100644
index 0000000..c45f353
--- /dev/null
+++ b/Source/WebCore/Modules/discovery/NetworkServices.idl
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2013 Cable Television Laboratories, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=DISCOVERY,
+    EventTarget,
+    NoInterfaceObject
+] interface NetworkServices {
+    readonly attribute unsigned long length;
+    getter NetworkService (unsigned long index);
+    NetworkService getServiceById(DOMString id);
+
+    readonly attribute unsigned long servicesAvailable;
+
+    // event handler attributes
+    attribute EventListener onserviceavailable;
+    attribute EventListener onserviceunavailable;
+};
diff --git a/Source/WebCore/Target.pri b/Source/WebCore/Target.pri
index 561039e..002994c 100644
--- a/Source/WebCore/Target.pri
+++ b/Source/WebCore/Target.pri
@@ -3134,6 +3134,21 @@ enable?(DATA_TRANSFER_ITEMS) {
         platform/qt/DataTransferItemListQt.cpp
 }
 
+enable?(DISCOVERY) {
+    HEADERS += \
+        Modules/discovery/NavigatorNetworkService.h \
+        Modules/discovery/NavigatorNetworkServiceError.h \
+        Modules/discovery/NavigatorNetworkServiceErrorCallback.h \
+        Modules/discovery/NavigatorNetworkServiceSuccessCallback.h \
+        Modules/discovery/NetworkService.h \
+        Modules/discovery/NetworkServices.h
+    SOURCES += \
+        Modules/discovery/NavigatorNetworkService.cpp \
+        Modules/discovery/NavigatorNetworkServiceError.cpp \
+        Modules/discovery/NetworkService.cpp \
+        Modules/discovery/NetworkServices.cpp
+}
+
 enable?(FILE_SYSTEM) {
     HEADERS += \
         Modules/filesystem/AsyncFileWriter.h \
diff --git a/Source/WebCore/WebCore.pri b/Source/WebCore/WebCore.pri
index 2b20d49..f68be96 100644
--- a/Source/WebCore/WebCore.pri
+++ b/Source/WebCore/WebCore.pri
@@ -13,6 +13,7 @@ WEBCORE_GENERATED_SOURCES_DIR = $${ROOT_BUILD_DIR}/Source/WebCore/$${GENERATED_S
 
 INCLUDEPATH += \
     $$SOURCE_DIR \
+    $$SOURCE_DIR/Modules/discovery \
     $$SOURCE_DIR/Modules/filesystem \
     $$SOURCE_DIR/Modules/geolocation \
     $$SOURCE_DIR/Modules/indexeddb \
diff --git a/Source/WebCore/dom/EventNames.h b/Source/WebCore/dom/EventNames.h
index 31d74f4..cf22ce7 100644
--- a/Source/WebCore/dom/EventNames.h
+++ b/Source/WebCore/dom/EventNames.h
@@ -256,6 +256,12 @@
     \
     macro(securitypolicyviolation) \
     \
+    macro(notify) \
+    macro(serviceavailable) \
+    macro(serviceoffline) \
+    macro(serviceonline) \
+    macro(serviceunavailable) \
+    \
 
 // end of DOM_EVENT_NAMES_FOR_EACH
 
diff --git a/Source/WebCore/dom/EventTarget.h b/Source/WebCore/dom/EventTarget.h
index 5326781..62e181f 100644
--- a/Source/WebCore/dom/EventTarget.h
+++ b/Source/WebCore/dom/EventTarget.h
@@ -60,6 +60,8 @@
     class MediaSource;
     class MediaStream;
     class MessagePort;
+    class NetworkService;
+    class NetworkServices;
     class Node;
     class Notification;
     class SVGElementInstance;
diff --git a/Source/WebCore/dom/EventTargetFactory.in b/Source/WebCore/dom/EventTargetFactory.in
index aeea96a..8ff280f 100644
--- a/Source/WebCore/dom/EventTargetFactory.in
+++ b/Source/WebCore/dom/EventTargetFactory.in
@@ -23,6 +23,8 @@ MediaStream conditional=MEDIA_STREAM
 MediaStreamTrack conditional=MEDIA_STREAM
 MessagePort
 NetworkInfoConnection conditional=NETWORK_INFO
+NetworkService conditional=DISCOVERY
+NetworkServices conditional=DISCOVERY
 Node
 Notification conditional=NOTIFICATIONS|LEGACY_NOTIFICATIONS
 Performance conditional=WEB_TIMING
diff --git a/Source/WebKit/mac/Configurations/FeatureDefines.xcconfig b/Source/WebKit/mac/Configurations/FeatureDefines.xcconfig
index fb17584..491f149 100644
--- a/Source/WebKit/mac/Configurations/FeatureDefines.xcconfig
+++ b/Source/WebKit/mac/Configurations/FeatureDefines.xcconfig
@@ -71,6 +71,7 @@ ENABLE_DEVICE_ORIENTATION_iphoneos = ENABLE_DEVICE_ORIENTATION;
 ENABLE_DEVICE_ORIENTATION_iphonesimulator = $(ENABLE_DEVICE_ORIENTATION_iphoneos);
 ENABLE_DIALOG_ELEMENT = ;
 ENABLE_DIRECTORY_UPLOAD = ;
+ENABLE_DISCOVERY = ENABLE_DISCOVERY;
 ENABLE_DOM4_EVENTS_CONSTRUCTOR = ENABLE_DOM4_EVENTS_CONSTRUCTOR;
 ENABLE_DRAGGABLE_REGION = ;
 ENABLE_ENCRYPTED_MEDIA = $(ENABLE_ENCRYPTED_MEDIA_$(PLATFORM_NAME));
diff --git a/Source/WebKit2/Configurations/FeatureDefines.xcconfig b/Source/WebKit2/Configurations/FeatureDefines.xcconfig
index 56138ed..35d97be 100644
--- a/Source/WebKit2/Configurations/FeatureDefines.xcconfig
+++ b/Source/WebKit2/Configurations/FeatureDefines.xcconfig
@@ -71,6 +71,7 @@ ENABLE_DEVICE_ORIENTATION_iphoneos = ENABLE_DEVICE_ORIENTATION;
 ENABLE_DEVICE_ORIENTATION_iphonesimulator = $(ENABLE_DEVICE_ORIENTATION_iphoneos);
 ENABLE_DIALOG_ELEMENT = ;
 ENABLE_DIRECTORY_UPLOAD = ;
+ENABLE_DISCOVERY = ENABLE_DISCOVERY;
 ENABLE_DOM4_EVENTS_CONSTRUCTOR = ENABLE_DOM4_EVENTS_CONSTRUCTOR;
 ENABLE_DRAGGABLE_REGION = ;
 ENABLE_ENCRYPTED_MEDIA = $(ENABLE_ENCRYPTED_MEDIA_$(PLATFORM_NAME));
diff --git a/Source/autotools/SetupWebKitFeatures.m4 b/Source/autotools/SetupWebKitFeatures.m4
index f0ab4c7..7f5d7fc 100644
--- a/Source/autotools/SetupWebKitFeatures.m4
+++ b/Source/autotools/SetupWebKitFeatures.m4
@@ -17,6 +17,12 @@ else
     CONFIGURABLE_FEATURE_DEFINES="$CONFIGURABLE_FEATURE_DEFINES ENABLE_SPELLCHECK=0"
 fi
 
+if test "$enable_discovery" = "yes"; then
+    CONFIGURABLE_FEATURE_DEFINES="$CONFIGURABLE_FEATURE_DEFINES ENABLE_DISCOVERY=1"
+else
+    CONFIGURABLE_FEATURE_DEFINES="$CONFIGURABLE_FEATURE_DEFINES ENABLE_DISCOVERY=0"
+fi
+
 if test "$enable_gamepad" = "yes"; then
     CONFIGURABLE_FEATURE_DEFINES="$CONFIGURABLE_FEATURE_DEFINES ENABLE_GAMEPAD=1"
 else
diff --git a/Source/cmake/WebKitFeatures.cmake b/Source/cmake/WebKitFeatures.cmake
index 1945b24..738e589 100644
--- a/Source/cmake/WebKitFeatures.cmake
+++ b/Source/cmake/WebKitFeatures.cmake
@@ -47,6 +47,7 @@ macro(WEBKIT_OPTION_BEGIN)
     WEBKIT_OPTION_DEFINE(ENABLE_DEVICE_ORIENTATION "Toggle DeviceOrientation support" OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_DIALOG_ELEMENT "Toggle Dialog Element support" OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_DIRECTORY_UPLOAD "Toggle Directory upload support" OFF)
+    WEBKIT_OPTION_DEFINE(ENABLE_DISCOVERY "Toggle Network Service Discovery support" OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_DOM4_EVENTS_CONSTRUCTOR "Toggle DOM4 Events constructors" OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_DOWNLOAD_ATTRIBUTE "Toggle download attribute support" OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_DRAG_SUPPORT "Toggle Drag Support" OFF)
diff --git a/Source/cmakeconfig.h.cmake b/Source/cmakeconfig.h.cmake
index d5f2b52..86a966f 100644
--- a/Source/cmakeconfig.h.cmake
+++ b/Source/cmakeconfig.h.cmake
@@ -36,6 +36,7 @@
 #cmakedefine01 ENABLE_DETAILS_ELEMENT
 #cmakedefine01 ENABLE_DEVICE_ORIENTATION
 #cmakedefine01 ENABLE_DIALOG_ELEMENT
+#cmakedefine01 ENABLE_DISCOVERY
 #cmakedefine01 ENABLE_DOM4_EVENTS_CONSTRUCTOR
 #cmakedefine01 ENABLE_DOWNLOAD_ATTRIBUTE
 #cmakedefine01 ENABLE_DRAG_SUPPORT
diff --git a/Tools/Scripts/webkitperl/FeatureList.pm b/Tools/Scripts/webkitperl/FeatureList.pm
index ea2baf9..a3e18f7 100644
--- a/Tools/Scripts/webkitperl/FeatureList.pm
+++ b/Tools/Scripts/webkitperl/FeatureList.pm
@@ -75,6 +75,7 @@ my (
     $deviceOrientationSupport,
     $dialogElementSupport,
     $directoryUploadSupport,
+    $discoverySupport,
     $dom4EventsConstructor,
     $downloadAttributeSupport,
     $fileSystemSupport,
@@ -254,6 +255,9 @@ my @features = (
     { option => "directory-upload", desc => "Toggle Directory Upload support",
       define => "ENABLE_DIRECTORY_UPLOAD", default => 0, value => \$directoryUploadSupport },
 
+    { option => "discovery", desc => "Toggle Network Service Discovery support",
+      define => "ENABLE_DISCOVERY", default => 0, value => \$discoverySupport },
+
     { option => "dom4-events-constructor", desc => "Expose DOM4 Events constructors",
       define => "ENABLE_DOM4_EVENTS_CONSTRUCTOR", default => (isAppleWebKit() || isGtk() || isEfl()), value => \$dom4EventsConstructor },
 
diff --git a/Tools/qmake/mkspecs/features/features.pri b/Tools/qmake/mkspecs/features/features.pri
index 4992e8d..8d54b87 100644
--- a/Tools/qmake/mkspecs/features/features.pri
+++ b/Tools/qmake/mkspecs/features/features.pri
@@ -46,6 +46,7 @@ FEATURE_DEFAULTS = \
     ENABLE_DETAILS_ELEMENT=1 \
     ENABLE_DEVICE_ORIENTATION=1 \
     ENABLE_DIRECTORY_UPLOAD=0 \
+    ENABLE_DISCOVERY=0 \
     ENABLE_DOWNLOAD_ATTRIBUTE=0 \
     ENABLE_FAST_MOBILE_SCROLLING=1 \
     ENABLE_FILE_SYSTEM=0 \
-- 
1.8.5.5

